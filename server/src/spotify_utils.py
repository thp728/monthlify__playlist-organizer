# monthlify/server/src/spotify_utils.py

import spotipy
from spotipy.oauth2 import SpotifyOAuth


def create_spotify_client(token_info):
    """
    Creates and returns a Spotipy client authenticated with the user's token.
    """
    return spotipy.Spotify(auth=token_info["access_token"])


def get_current_users_playlists(sp_client):
    """
    Fetches the current user's playlists.
    """
    playlists = sp_client.current_user_playlists()
    return playlists["items"]


def get_liked_songs(sp_client, limit=50):
    """
    Fetches the user's liked songs.

    Note: This is just a starting point. You'll need to handle pagination
    to get all liked songs, as the API returns a maximum of 50 at a time.
    """
    results = sp_client.current_user_saved_tracks(limit=limit)
    return results["items"]


def get_all_liked_songs(sp_client):
    """
    Fetches all liked songs from the user's library, handling pagination.
    Returns a list of all tracks.
    """
    results = sp_client.current_user_saved_tracks(limit=50)
    tracks = results["items"]

    # Check if there are more songs to fetch
    while results["next"]:
        results = sp_client.next(results)
        tracks.extend(results["items"])

    return tracks


def get_or_create_playlist(sp_client, user_id, playlist_name):
    """
    Checks if a playlist with the given name exists. If so, returns it.
    Otherwise, creates a new private playlist and returns the newly created playlist object.
    """
    current_playlists = sp_client.current_user_playlists(limit=50)

    for playlist in current_playlists["items"]:
        if playlist["name"] == playlist_name and playlist["owner"]["id"] == user_id:
            # Found the existing playlist
            return playlist

    # If the playlist doesn't exist, create it
    new_playlist = sp_client.user_playlist_create(
        user=user_id,
        name=playlist_name,
        public=False,  # We want the playlists to be private
        description=f"Monthly playlist automatically generated by Monthlify for {playlist_name}.",
    )
    return new_playlist


def add_tracks_to_playlist(sp_client, playlist_id, track_uris):
    """
    Adds tracks to a specified playlist. The Spotify API has a limit of 100 tracks per request,
    so we need to handle this by splitting the list of tracks.
    """
    # Spotify allows a maximum of 100 tracks per API call
    for i in range(0, len(track_uris), 100):
        batch = track_uris[i : i + 100]
        sp_client.playlist_add_items(playlist_id, batch)


def get_all_playlist_tracks(sp_client, playlist_url):
    """
    Fetches all tracks from a given playlist, handling pagination.
    Returns a list of all tracks.
    """
    # The playlist_url needs to be converted to a playlist ID
    try:
        playlist_id = playlist_url.split("/")[-1].split("?")[0]
    except IndexError:
        raise ValueError("Invalid Spotify playlist URL.")

    results = sp_client.playlist_items(playlist_id, limit=100)
    tracks = results["items"]

    # Check for more songs to fetch
    while results["next"]:
        results = sp_client.next(results)
        tracks.extend(results["items"])

    return tracks
